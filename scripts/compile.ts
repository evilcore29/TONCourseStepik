import * as fs from "fs";
import process from "process";
import { Cell } from "@ton/core";
import { compileFunc } from "@ton-community/func-js";

async function compileScript() {
  console.log("=================================================================");
  console.log("Compile script is running, let's find some FunC code to compile...");

  // * –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ç–æ —á—Ç–æ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  // * –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ BOC (Body of Cell) –≤ —Å—Ç—Ä–æ–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞ base64. –ï—Å–ª–∏ –º—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ (—Å–æ–∑–¥–∞–≤–∞—è —Ç–µ—Å—Ç—ã), –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —è—á–µ–π–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —ç—Ç–æ—Ç BOC —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

  const compileResult = await compileFunc({
    targets: ["./contracts/main.fc"],
    sources: (x) => fs.readFileSync(x).toString("utf8"),
  });
  // console.log("üöÄ ~ file: compile.ts:37 ~ compileScript ~ compileResult:", compileResult);

  // * –ª–æ–≤–∏–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  if (compileResult.status === "error") {
    console.log(" - OH NO! Compilation Errors! The compiler output was:");
    console.log(`\n${compileResult.message}`);
    process.exit(1);
  }

  console.log(" - Compilation successful!");

  // * –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
  const hexArtifact = `build/main.compiled.json`;

  // * c–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
  // * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —è—á–µ–µ–∫ (Cell) –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥ .fromBoc, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –±—É—Ñ–µ—Ä, —Ç–∞–∫ —á—Ç–æ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –µ–º—É –±—É—Ñ–µ—Ä –≤ –≤–∏–¥–µ BOC (Body of Cell) –≤ —Å—Ç—Ä–æ–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞ base64. –ö–æ–≥–¥–∞ –º—ã —Å–æ–∑–¥–∞–¥–∏–º —è—á–µ–π–∫—É –∏–∑ BOC, –Ω–∞–º —Ç–∞–∫–∂–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π —è—á–µ–π–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ JSON-—Ñ–∞–π–ª–µ.
  const cellFromBoc = Cell.fromBoc(Buffer.from(compileResult.codeBoc, "base64"))[0];
  // console.log("üöÄ ~ file: compile.ts:42 ~ compileScript ~ cellFromBoc:", cellFromBoc);
  fs.writeFileSync(hexArtifact, JSON.stringify({ hex: cellFromBoc.toBoc().toString("hex") }));

  console.log(" - Compiled code saved to " + hexArtifact);
}

compileScript();
